import argparse
import sys
import time

import mlflow
from mlflow.tracking import MlflowClient


def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument("--model-name", required=True, help="Registered model name")
    p.add_argument("--from-stage", default="Staging", help="Stage to copy from (e.g. Staging)")
    p.add_argument("--to-stage", default="Staging", help="Stage to promote to (e.g. Staging)")
    return p.parse_args()


def main():
    args = parse_args()
    client = MlflowClient()

    vers = client.get_latest_versions(args.model_name, stages=[args.from_stage])
    if not vers:
        print(f"[ERROR] No version in stage '{args.from_stage}' for model '{args.model_name}'", file=sys.stderr)
        sys.exit(1)

    v = vers[0]
    print(f"[INFO] Found {args.model_name} v{v.version} in stage {v.current_stage}")
    print(f"[INFO] Source artifact: {v.source}")

    print("[INFO] Registering new version from the same source...")
    new_ver = mlflow.register_model(model_uri=v.source, name=args.model_name)
    print(f"[INFO] New version created: v{new_ver.version}, status={new_ver.status}")


    for _ in range(60):
        mv = client.get_model_version(args.model_name, new_ver.version)
        if mv.status == "READY":
            print(f"[INFO] Model version v{mv.version} is READY.")
            break
        time.sleep(2)
    else:
        print("[ERROR] Timed out waiting for model version to be READY", file=sys.stderr)
        sys.exit(1)

    client.transition_model_version_stage(
        name=args.model_name,
        version=new_ver.version,
        stage=args.to_stage,
        archive_existing_versions=False,
    )
    print(f"[INFO] Promoted v{new_ver.version} to stage '{args.to_stage}'")
    print("[INFO] Done.")


if __name__ == "__main__":
    main()

