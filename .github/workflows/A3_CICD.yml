name: A3_CICD
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/aps-a3   # ชื่อ image ที่จะ build/push

jobs:
  relog_a3:
    name: Re-log A3 model to Staging
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_NAME: ${{ secrets.MODEL_NAME }}   # เช่น st126130-a3-model
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install relog deps
        run: |
          pip install -r requirements.txt
          pip install mlflow

      - name: Re-log and register to Staging
        run: |
          python scripts/relog_a3_from_run.py \
            --model-name "$MODEL_NAME" \
            --from-stage "Staging" \
            --to-stage "Staging"

  test:
    runs-on: ubuntu-latest
    needs: relog_a3
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_URI: ${{ secrets.MODEL_URI }}   # ใส่เป็น models:/<MODEL_NAME>/Staging หรือ runs:/<RUN_ID>/model
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install pytest mlflow

      - name: Run unit tests
        run: pytest -q

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev
            type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/a3.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ success() }}
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          printf "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - name: Pull & restart container via SSH
        env:
          DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE: ${{ env.IMAGE_NAME }}
          HOST: ${{ secrets.DEPLOY_HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          PORT: ${{ secrets.DEPLOY_PORT || '22' }}
        run: |
          ssh -p "$PORT" "$USER@$HOST" <<'EOF'
          docker login -u $DOCKER_USER -p '${{ secrets.DOCKERHUB_TOKEN }}'
          docker pull $IMAGE:dev
          docker rm -f aps-a3 || true
          docker run -d --name aps-a3 --restart=always \
            -p 8080:8000 \
            -e MLFLOW_TRACKING_URI='${{ secrets.MLFLOW_TRACKING_URI }}' \
            -e MLFLOW_TRACKING_USERNAME='${{ secrets.MLFLOW_TRACKING_USERNAME }}' \
            -e MLFLOW_TRACKING_PASSWORD='${{ secrets.MLFLOW_TRACKING_PASSWORD }}' \
            -e MODEL_URI='${{ secrets.MODEL_URI }}' \
            $IMAGE:dev
          EOF



