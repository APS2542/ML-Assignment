name: A3_CICD

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/aps-a3
  IMAGE_TAG: dev

jobs:
  relog_and_register:
    name: Re-log A3 model to Staging
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI:        ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME:   ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD:   ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_INSECURE_TLS: "true"   

      MODEL_URI:  ${{ secrets.MODEL_URI }}
      MODEL_NAME: ${{ secrets.MODEL_NAME }}

      TO_STAGE:   Staging
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install "mlflow==2.16.2" scikit-learn

      - name: Debug env presence (masked)
        run: |
          py <<'PY'
          import os
          def ok(k): 
              v=os.getenv(k,"")
              print(f"{k}: {'SET' if v.strip() else 'MISSING'}")
          for k in ["MLFLOW_TRACKING_URI","MLFLOW_TRACKING_USERNAME","MLFLOW_TRACKING_PASSWORD",
                    "MODEL_URI","MODEL_NAME"]:
              ok(k)
          PY

      - name: Sanity check MLflow auth
        run: |
          py <<'PY'
          import os
          from mlflow.tracking import MlflowClient
          uri=os.getenv("MLFLOW_TRACKING_URI","")
          print("Tracking URI:", uri)
          c=MlflowClient()
          # ลอง list registered models แค่ 1 รายการ เพื่อทดสอบสิทธิ์/SSL
          ms=c.search_registered_models(max_results=1)
          print("OK: connected to MLflow; sample models:", [m.name for m in ms])
          PY

      - name: Re-log and register to Staging
        run: python scripts/relog_a3.py
        timeout-minutes: 5

  tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [relog_and_register]
    env:
      MLFLOW_TRACKING_URI:        ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME:   ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD:   ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MLFLOW_TRACKING_INSECURE_TLS: "true"
      TEST_MODEL_URI: ${{ secrets.MODEL_URI != '' && secrets.MODEL_URI || format('models:/{0}/Staging', secrets.MODEL_NAME) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          pip install -U pip
          pip install pytest "mlflow==2.16.2" scikit-learn numpy pandas
      - name: Run pytest
        run: pytest -q

  build_and_push:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/a3.Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: SSH & run container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true
            docker rm -f aps-a3 || true
            docker run -d --name aps-a3 -p 8080:8000 \
              -e MLFLOW_TRACKING_URI='${{ secrets.MLFLOW_TRACKING_URI }}' \
              -e MLFLOW_TRACKING_USERNAME='${{ secrets.MLFLOW_TRACKING_USERNAME }}' \
              -e MLFLOW_TRACKING_PASSWORD='${{ secrets.MLFLOW_TRACKING_PASSWORD }}' \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
