name: A3_CICD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/aps-a3
  APP_PORT: "8080"  
  CONTAINER_PORT: "8000" 

jobs:
  relog_and_register:
    name: Re-log A3 model to Staging
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      A3_MODEL_NAME: ${{ secrets.A3_MODEL_NAME }}
      A3_FROM_STAGE: "Staging"
      A3_TO_STAGE: "Staging"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install mlflow==2.16.2

      - name: Re-log and register to Staging
        run: |
          python scripts/relog_a3_from_run.py \
            --model-name "${A3_MODEL_NAME}" \
            --from-stage "${A3_FROM_STAGE}" \
            --to-stage "${A3_TO_STAGE}"

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: [relog_and_register]
    env:
      # ใช้ Registry URI เพื่อทดสอบเวอร์ชันที่เพิ่งโปรโมตไป Staging
      MODEL_URI: models:/${{ secrets.A3_MODEL_NAME }}/Staging
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install project deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest mlflow

      - name: pytest
        run: pytest -q

  build_and_push:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v4

      - name: Docker login
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build image
        run: |
          docker build -f app/a3.Dockerfile -t "${IMAGE_NAME}:latest" .

      - name: Push image
        run: |
          docker push "${IMAGE_NAME}:latest"

  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: [build_and_push]
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_URI: models:/${{ secrets.A3_MODEL_NAME }}/Staging
    steps:
      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_deploy
          chmod 600 ~/.ssh/id_deploy
          # เพิ่ม host ลง known_hosts (ถ้ามีพอร์ตกำหนดมากับ secret ให้ใช้; ไม่มีก็ 22)
          PORT="${{ secrets.DEPLOY_SSH_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          ssh-keyscan -p "$PORT" -H "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Remote pull & run
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          HOST: ${{ secrets.DEPLOY_HOST }}
          USER: ${{ secrets.DEPLOY_USER }}
          PORT: ${{ secrets.DEPLOY_SSH_PORT }}
        run: |
          if [ -z "$PORT" ]; then PORT=22; fi

          ssh -i ~/.ssh/id_deploy -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" bash << 'EOSSH'
            set -e
            echo "$DH_TOKEN" | docker login -u "$DH_USER" --password-stdin

            docker pull "${IMAGE_NAME}:latest"

            docker rm -f aps-a3 || true

            docker run -d --name aps-a3 \
              --restart unless-stopped \
              -e MLFLOW_TRACKING_URI="${MLFLOW_TRACKING_URI}" \
              -e MLFLOW_TRACKING_USERNAME="${MLFLOW_TRACKING_USERNAME}" \
              -e MLFLOW_TRACKING_PASSWORD="${MLFLOW_TRACKING_PASSWORD}" \
              -e MODEL_URI="${MODEL_URI}" \
              -p ${APP_PORT}:${CONTAINER_PORT} \
              "${IMAGE_NAME}:latest"
          EOSSH


