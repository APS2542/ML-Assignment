name: A3_CICD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/aps-a3
  PYTHON_VERSION: "3.12"
  PROMOTE_STAGE: "Staging"

jobs:
  relog:
    name: Re-log A3 model to Staging
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_URI: ${{ secrets.MODEL_URI }}           
      MODEL_NAME: ${{ secrets.MODEL_NAME }}        
      PROMOTE_STAGE: Staging                        

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install "mlflow==2.16.2" "pandas==2.2.3" "numpy==1.26.4" "scikit-learn==1.5.2"

      - name: Debug env presence (masked)
        run: |
          python - <<'PY'
          import os
          def show(k):
              print(f"{k}: {'SET' if os.getenv(k,'').strip() else 'MISSING'}")
          for k in ["MLFLOW_TRACKING_URI","MLFLOW_TRACKING_USERNAME","MLFLOW_TRACKING_PASSWORD",
                    "MODEL_URI","MODEL_NAME","PROMOTE_STAGE"]:
              show(k)
          PY

      - name: Sanity check MLflow auth
        run: |
          python - <<'PY'
          import os
          from mlflow.tracking import MlflowClient
          uri=os.getenv("MLFLOW_TRACKING_URI","")
          print("Tracking URI:", uri)
          c=MlflowClient()
          _ = c.search_registered_models(max_results=1)
          print("OK: Connected to MLflow")
          PY

      - name: Re-log and register to Staging
        run: |
          python - <<'PY'
          import os, re, sys, time
          import mlflow
          from mlflow.tracking import MlflowClient
          uri   = os.getenv("MODEL_URI","").strip()
          name  = os.getenv("MODEL_NAME","").strip()
          stage = os.getenv("PROMOTE_STAGE","Staging").strip() or "Staging"
          if not uri:
            raise RuntimeError("MODEL_URI (secret) is required")

          client = MlflowClient()
          print(f"[INFO] Source MODEL_URI = {uri}")

          if uri.startswith("models:/"):
              import re
              m = re.match(r"models:/([^/]+)/(.+)", uri)
              if not m:
                  raise RuntimeError(f"Invalid models URI: {uri}")
              reg_name, tail = m.groups()
              print(f"[INFO] Registry model = {reg_name}, tail = {tail}")

              if tail.lower() in ["staging","production","none","archived"]:
                  vers = client.get_latest_versions(reg_name, [tail.capitalize()])
                  if not vers:
                      raise RuntimeError(f"No versions found in stage {tail} for {reg_name}")
                  version = vers[0].version
              else:
                  version = tail

              print(f"[INFO] Transition version {version} of {reg_name} -> {stage}")
              client.transition_model_version_stage(name=reg_name, version=str(version), stage=stage, archive_existing_versions=False)
              print("[INFO] Transition done.")
          else:
              # runs:/ หรือ path → register ใหม่
              if not name:
                  raise RuntimeError("MODEL_NAME is required when MODEL_URI is not 'models:/'")
              print(f"[INFO] Register model to registry name: {name}")
              mv = mlflow.register_model(model_uri=uri, name=name)
              print("[INFO] Registered version =", mv.version)

              from mlflow.tracking import MlflowClient
              client = MlflowClient()
              for _ in range(30):
                  mv = client.get_model_version(name, mv.version)
                  if mv.status == "READY":
                      break
                  time.sleep(2)
              if mv.status != "READY":
                  raise RuntimeError(f"Model version not READY: {mv.status}")
              client.transition_model_version_stage(name=name, version=mv.version, stage=stage, archive_existing_versions=False)
              print(f"[INFO] Transitioned {name} v{mv.version} -> {stage}")
          PY

  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: relog
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install project deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Pytest
        run: pytest -q

  build_and_push:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push (no-cache, pull)
        uses: docker/build-push-action@v6
        with:
          context: ./app
          file: ./app/a3.Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:dev
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          pull: true
          no-cache: true
          provenance: false

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key (decode & add)
        shell: bash
        run: |
          set -e
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY_B64 }}" | tr -d '\r' | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_ed25519
          
          cat > ~/.ssh/config <<'EOF'
          Host bazooka
            HostName bazooka.cs.ait.ac.th
            User ${{ secrets.DEPLOY_USER }}
            IdentityFile ~/.ssh/id_ed25519

          Host ml2023_1
            HostName ${{ secrets.DEPLOY_HOST }}
            User ${{ secrets.DEPLOY_USER }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyJump bazooka
          EOF
          chmod 600 ~/.ssh/config

          # เพิ่ม known_hosts ให้ไม่ถาม interactive
          ssh-keyscan -H bazooka.cs.ait.ac.th >> ~/.ssh/known_hosts 2>/dev/null || true
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        shell: bash
        run: |
          set -e
          scp -o StrictHostKeyChecking=yes docker-compose-deploy.yml ml2023_1:~/docker-compose.yml
          ssh ml2023_1 '
            docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
            docker compose -f ~/docker-compose.yml pull
            docker compose -f ~/docker-compose.yml up -d
