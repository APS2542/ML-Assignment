name: A3_CICD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/aps-a3
  DEPLOY_PORT: 8080

jobs:
  #Re-log/Promote
  relog_a3:
    name: Re-log A3 model to Staging
    runs-on: ubuntu-latest
    outputs:
      MODEL_URI: ${{ steps.relog.outputs.model_uri }}
    env:
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_NAME: ${{ secrets.MODEL_NAME }}         # เช่น st126130-a3-model
      FROM_STAGE: ${{ secrets.FROM_STAGE || 'Production' }}
      PROMOTE_STAGE: ${{ secrets.PROMOTE_STAGE || 'Staging' }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install "mlflow==2.16.2" "scikit-learn==1.5.2"

      - name: Re-log & register to ${{ env.PROMOTE_STAGE }}
        id: relog
        run: |
          python scripts/relog_a3_from_run.py \
            --model-name "${MODEL_NAME}" \
            --from-stage "${FROM_STAGE}" \
            --to-stage "${PROMOTE_STAGE}"

          # ส่งค่า MODEL_URI ไปเป็น output ของ job
          echo "model_uri=models:/${MODEL_NAME}/${PROMOTE_STAGE}" >> "$GITHUB_OUTPUT"

  #unit tests
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: relog_a3

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install project deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run pytest
        run: pytest -q

  #Build & Push Docker image 
  build_and_push:
    name: Build & push Docker image
    runs-on: ubuntu-latest
    needs: [ relog_a3, test ]
    env:
      MODEL_URI: ${{ needs.relog_a3.outputs.MODEL_URI }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push (no-cache, pull)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: app/a3.Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:dev
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          pull: true
          no-cache: true
          provenance: false
          build-args: |
            MODEL_URI=${{ env.MODEL_URI }}

  #Deploy
  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest
    needs: build_and_push
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      DEPLOY_PORT: ${{ env.DEPLOY_PORT }}
      MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_URI: models:/${{ secrets.MODEL_NAME }}/${{ secrets.PROMOTE_STAGE || 'Staging' }}

    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          printf "Host target\n  HostName %s\n  User %s\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n" \
            "${{ secrets.DEPLOY_HOST }}" "${{ secrets.DEPLOY_USER }}" > ~/.ssh/config

      - name: Pull & run container
        run: |
          ssh target "docker pull ${IMAGE_NAME}:dev || true"
          ssh target "docker stop aps-a3 || true && docker rm aps-a3 || true"
          ssh target "docker run -d --restart=always --name aps-a3 \
            -e MLFLOW_TRACKING_URI='${MLFLOW_TRACKING_URI}' \
            -e MLFLOW_TRACKING_USERNAME='${MLFLOW_TRACKING_USERNAME}' \
            -e MLFLOW_TRACKING_PASSWORD='${MLFLOW_TRACKING_PASSWORD}' \
            -e MODEL_URI='${MODEL_URI}' \
            -p ${DEPLOY_PORT}:8000 \
            ${IMAGE_NAME}:dev"

